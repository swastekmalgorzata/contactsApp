// <auto-generated />
using System;
using ContactsApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactsApp.Migrations.Apartments
{
    [DbContext(typeof(ApartmentsContext))]
    [Migration("20231213172421_RommateEntity")]
    partial class RommateEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ContactsApp.Apartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("ContactsApp.Models.Roommate", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ApartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoommateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoommateId"), 1L, 1);

                    b.HasKey("UserId");

                    b.ToTable("Roommates");
                });

            modelBuilder.Entity("ContactsApp.Rent", b =>
                {
                    b.Property<long>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RentId"), 1L, 1);

                    b.Property<long>("ApartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CustomBreakdown")
                        .HasColumnType("bit");

                    b.Property<double?>("EvenBreakDown")
                        .HasColumnType("float");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WholeAmount")
                        .HasColumnType("float");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("ContactsApp.Rent", b =>
                {
                    b.OwnsMany("ContactsApp.Modules.RoommatePart", "CustomCostBreakDown", b1 =>
                        {
                            b1.Property<long>("RentId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<double>("Share")
                                .HasColumnType("float");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("RentId", "Id");

                            b1.ToTable("RoommatePart");

                            b1.WithOwner()
                                .HasForeignKey("RentId");
                        });

                    b.Navigation("CustomCostBreakDown");
                });
#pragma warning restore 612, 618
        }
    }
}
